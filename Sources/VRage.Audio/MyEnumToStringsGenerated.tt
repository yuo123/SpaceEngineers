<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#
string appName = "Sandbox Enum to String Generator Template";
string version = "1.0.0.0";

string enumPath = @"MyAudio_Data.cs";
string path = Path.Combine(this.Host.ResolvePath(""), enumPath);

string enumName = "MySoundCuesEnum";
string name = "Sounds";

string file = System.IO.File.ReadAllText(path);

var capture = Regex.Match(file, "enum "+enumName+"[^{]*{([^}]*)}", RegexOptions.Singleline).Groups[1].Value;

var values = capture.Split(',');


#>

namespace Sandbox.Audio
{

	[System.CodeDom.Compiler.GeneratedCode("<#= appName #>", "<#= version #>")]
    public static partial class MyEnumsToStrings
	{

		public static string[] <#=name#> = new string[] 
		{ 
				<# foreach(var item in values) 
				{
					string text = item.Trim();
					if (String.IsNullOrWhiteSpace(text))
					{
						continue;
					}
					if (text.StartsWith("//"))
					{
						continue;
					}
					if (text.IndexOf("=") != -1)
					{
						text = text.Substring(0, text.IndexOf("=")-1);
					}
				 #>
	"<#=text#>",
				<# } #>
		};
			
	}
}